/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as PrivateRouteImport } from './routes/_private'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as PrivateHomeRouteImport } from './routes/_private/home'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRoute = PrivateRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const PrivateHomeRoute = PrivateHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => PrivateRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof PrivateHomeRoute
  '/login': typeof PublicLoginRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof PrivateHomeRoute
  '/login': typeof PublicLoginRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_private': typeof PrivateRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_private/home': typeof PrivateHomeRoute
  '/_public/login': typeof PublicLoginRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/home' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/login'
  id:
    | '__root__'
    | '/'
    | '/_private'
    | '/_public'
    | '/_private/home'
    | '/_public/login'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivateRoute: typeof PrivateRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_private/home': {
      id: '/_private/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof PrivateHomeRouteImport
      parentRoute: typeof PrivateRoute
    }
  }
}

interface PrivateRouteChildren {
  PrivateHomeRoute: typeof PrivateHomeRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateHomeRoute: PrivateHomeRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
